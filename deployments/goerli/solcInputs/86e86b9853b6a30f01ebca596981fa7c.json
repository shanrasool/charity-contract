{
  "language": "Solidity",
  "sources": {
    "contracts/Charity.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\nerror NotOwner();\r\nerror NotEnoughFund();\r\n\r\ncontract Charity {\r\n\r\n    mapping(address => uint256) public s_addressToAmount;\r\n    address[] public s_donators;\r\n\r\n    uint256 private constant MIN_FUND = 0.001 ether;\r\n    address private immutable i_owner;\r\n\r\n    event DonationAdded(address indexed donator);\r\n\r\n    constructor() {\r\n        i_owner = msg.sender;\r\n    }\r\n\r\n    function fund () public payable {\r\n        if (msg.value < MIN_FUND) {revert NotEnoughFund();}\r\n        s_addressToAmount[msg.sender] += msg.value;\r\n        s_donators.push(msg.sender);\r\n        emit DonationAdded(msg.sender);\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        (bool callSuccess,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n\r\n        require(callSuccess, \"Call failed\"); \r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != i_owner) {revert NotOwner();}\r\n        _;\r\n    }\r\n\r\n    function getDonator(uint256 index) public view returns(address){\r\n        return s_donators[index];\r\n    }\r\n\r\n    function getMinimumAmountToFund() public pure returns(uint256) {\r\n        return MIN_FUND;\r\n    }\r\n\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}